#!/bin/sh

audit_control="/etc/security/audit_control"
audit_daemon='/etc/rc.conf'
text='test.txt'

# Array containing all network system calls to be tested
syscalls="socket(2) setsockopt(2) bind(2) listen(2)
          accept(2) sendto(2) recvfrom(2) connect(2)"


# Fetches the location of Audit trails
# Default: /var/audit
auditdir=$(cat ${audit_control} | grep "dir:" | cut -d ':' -f 2)
echo "Audit Directory: ${auditdir} .. ✔"


# Start audit daemon and catch the generated trails
start_audit()
{
    # Start audit daemon and setup a new trail
    local init="service auditd start"
    local newt="audit -n"

    eval ${init}; eval ${newt}
    echo "Audit daemon and new trail started .. ✔"
    return
}


# Stop Audit daemon
stop_audit()
{
    local stop="audit -t &> /dev/null"
    eval ${stop}
    echo "Audit daemon stopped .. ✔"
    return
}


# Execute the network binary and connect using telnet
launch_syscalls()
{
    if [ ! -f network ]; then
        echo "Please run 'make' first .. ✘"
        stop_audit
        exit 1
    fi

    # Launch network system calls
    ./network &
    echo "Launching system calls .. ✔"

    # Connect to the socket
    telnet localhost 9000 | echo "Test Message"
    echo "Connected via client .. ✔"

    return
}


# Prints the result of testing
print_statistics()
{

    no_of_tests_passed=$(wc -l ${text} | sed -e 's/^[[:space:]]*//' | cut -d ' ' -f 1)
    no_of_syscalls=$(echo ${syscalls} | wc -w)
    no_of_tests_expected=$(( 2 * ${no_of_syscalls} ))

    printf "\n------------------Statistics---------------------\n"
    printf "Tests evaluated: ${no_of_tests_expected}\n"
    printf "Tests passed: ${no_of_tests_passed}\n"
    return
}


# Loops through all syscalls and searches for presence of
# both success and failure mode in the trail. If found, the test
# for that particular mode passes.
test_syscalls()
{

    local main_trail=$1

    local fullpath="${auditdir}/${main_trail}"

    # Loop through the lines of $fullpath and check success
    # and failure condition of each syscall

    for syscall in ${syscalls}; do
        printf "===============================================\n"
        echo "Testing ${syscall}.."
        success_mode="Success mode passed: ${syscall}"
        failure_mode="Failure mode passed: ${syscall}"

        praudit -l ${fullpath} | grep ${syscall} | while read -r find_syscall; do
            # Check for success and failure mode
            check_success=$(echo ${find_syscall} | grep "return,success")
            check_failure=$(echo ${find_syscall} | grep "return,failure")

            # Can add tests for arguments, file descriptors etc

            if [ "$check_success" != "" ] && [ "$pass_once" != 1 ]; then
                echo "$success_mode .. ✔"
                echo "$success_mode" >> ${text}
                export pass_once=1
            fi

            if [ "$check_failure" != "" ] && [ "$fail_once" != 1 ]; then
                echo "$failure_mode .. ✔"
                echo "$failure_mode" >> ${text}
                export fail_once=1
            fi

        done

        check_passed=$(cat test.txt | grep "${success_mode}")
        check_failed=$(cat test.txt | grep "${failure_mode}")

        if [ "$check_passed" = "" ]; then
            echo "Success mode failed: ${syscall} .. ✘"
        fi

        if [ "$check_failed" = "" ]; then
            echo "Failure mode failed: ${syscall} .. ✘"
        fi

    done

    print_statistics
    return
}


# Cleans up the trails and the log files
cleanup()
{

    rm -f "$auditdir/$1"
    rm ${text}
    return
}


# Main function to launch all the functions above
main()
{

    start_audit
    launch_syscalls

    # Fetch the trail corresponding to trail catched earlier
    local current_trail=$(ls ${auditdir} | grep ".not_terminated")
    local init_name=$(echo ${current_trail} | cut -d '.' -f 1)
    stop_audit; printf "\n"

    local main_trail=$(ls ${auditdir} | grep ${init_name})
    test_syscalls ${main_trail}
    cleanup ${main_trail}

    return
}

main
